{"version":3,"sources":["components/TodoItem.js","todosData.js","App.js","index.js"],"names":["TodoItem","props","className","type","checked","item","completed","onChange","handleChange","id","text","todosData","App","state","todos","bind","this","setState","prevState","map","goz","todoItems","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6KAeeA,MAbf,SAAkBC,GACd,OACI,yBAAKC,UAAU,aACX,2BACIC,KAAK,WACLC,QAASH,EAAMI,KAAKC,UACpBC,SAAU,kBAAMN,EAAMO,aAAaP,EAAMI,KAAKI,OAElD,2BAAIR,EAAMI,KAAKK,QCkBZC,EA5BG,CACd,CACIF,GAAI,EACJC,KAAM,qBACNJ,WAAW,GAEf,CACIG,GAAI,EACJC,KAAM,mBACNJ,WAAW,GAEf,CACIG,GAAI,EACJC,KAAM,mBACNJ,WAAW,GAEf,CACIG,GAAI,EACJC,KAAM,WACNJ,WAAW,GAEf,CACIG,GAAI,EACJC,KAAM,mCACNJ,WAAW,IC4BJM,E,kDAnCX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,MAAOH,GAEX,EAAKH,aAAe,EAAKA,aAAaO,KAAlB,gBALV,E,yDAQDN,GAGTO,KAAKC,UAAS,SAAAC,GAOV,MAAO,CACHJ,MAPiBI,EAAUJ,MAAMK,KAAI,SAAAC,GAIrC,OAHIA,EAAIX,KAAOA,IACXW,EAAId,WAAac,EAAId,WAElBc,W,+BAQT,IAAD,OACCC,EAAYL,KAAKH,MAAMC,MAAMK,KAAI,SAAAd,GAAI,OAAI,kBAAC,EAAD,CAAUiB,IAAKjB,EAAKI,GAAIJ,KAAMA,EAAMG,aAAc,EAAKA,kBAEtG,OACI,yBAAKN,UAAU,aACVmB,O,GA9BCE,IAAMC,WCLxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.6d5026a4.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction TodoItem(props) {\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={props.item.completed}\r\n                onChange={() => props.handleChange(props.item.id)}\r\n            />\r\n            <p>{props.item.text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem\r\n","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Mow lawn\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Arrested Development\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData\r\n","/**\n * Let's make it so our checkbox can actually mark our todo as complete or incomplete!\n * This challenge is a little more involved than some of the past ones. Check the comments\n * in the code for some help on accomplishing this one\n *\n * Challenge:\n * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)\n *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part\n * 2. Pass the method down to the TodoItem component\n * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function\n */\n\nimport React from \"react\"\nimport TodoItem from \"./components/TodoItem\"\nimport todosData from \"./todosData\"\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            todos: todosData\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(id) {\n        // Update state so that the item with the given id flips `completed` from false to true (or vise versa)\n        // Remember not to modify prevState directly, but instead to return a new version of state with the change you want included in that update. (Think how you might use the `.map` method to do this)\n        this.setState(prevState => {\n            const updatedTodos = prevState.todos.map(goz => {\n                if (goz.id === id) {\n                    goz.completed = !goz.completed\n                }\n                return goz\n            })\n            return {\n                todos: updatedTodos\n            }\n        })\n    }\n\n    render() {\n        const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange}/>)\n\n        return (\n            <div className=\"todo-list\">\n                {todoItems}\n            </div>\n        )\n    }\n}\n\nexport default App\n","// Set up the React app from scratch\n// Render an App component (defined in a separate file)\n// Inside App, render:\n  // 1. A Navbar component\n  // 2. A MainContent component\n  // 3. A Footer component\n\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}